// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?   @map("password_hash")
  role          UserRole  @default(LEARNER)
  emailVerified DateTime? @map("email_verified")
  isDeleted     Boolean   @default(false) @map("is_deleted")
  deletedAt     DateTime? @map("deleted_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relations
  progress        UserProgress[]
  learningSessions LearningSession[]

  @@map("users")
}

model Course {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  orderIndex  Int      @map("order_index")
  isActive    Boolean  @default(true) @map("is_active")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  chapters Chapter[]

  @@map("courses")
}

model Chapter {
  id          Int      @id @default(autoincrement())
  courseId    Int      @map("course_id")
  title       String
  description String?
  orderIndex  Int      @map("order_index")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedAt   DateTime? @map("deleted_at")
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  course  Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons Lesson[]

  @@map("chapters")
}

model Lesson {
  id                Int      @id @default(autoincrement())
  chapterId         Int      @map("chapter_id")
  title             String
  content           String
  estimatedMinutes  Int?     @map("estimated_minutes")
  orderIndex        Int      @map("order_index")
  isDeleted         Boolean  @default(false) @map("is_deleted")
  deletedAt         DateTime? @map("deleted_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  chapter          Chapter           @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  progress         UserProgress[]
  learningSessions LearningSession[]

  @@map("lessons")
}

model UserProgress {
  id          String           @id @default(cuid())
  userId      String           @map("user_id")
  lessonId    Int              @map("lesson_id")
  status      ProgressStatus   @default(NOT_STARTED)
  startedAt   DateTime?        @map("started_at")
  completedAt DateTime?        @map("completed_at")
  createdAt   DateTime         @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_progress")
}

model LearningSession {
  id              String    @id @default(cuid())
  userId          String    @map("user_id")
  lessonId        Int       @map("lesson_id")
  startedAt       DateTime  @map("started_at")
  endedAt         DateTime? @map("ended_at")
  durationMinutes Int?      @map("duration_minutes")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("learning_sessions")
}

// Enums
enum UserRole {
  ADMIN
  INSTRUCTOR
  LEARNER
}

enum ProgressStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}